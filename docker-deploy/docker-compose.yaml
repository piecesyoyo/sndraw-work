services:

  # The lightrag.
  work_lightrag:
    image: lightrag-api:1.0.5
    restart: always
    environment:
      DEBUG: false
      MULTI_MODE: true
      SERVER_BIND_WORKERS: 2
      #LIGHTRAG_API_KEY
      LIGHTRAG_API_KEY: prd-LIGHTRAG_API_KEY
      LLM_BINDING: ollama
      LLM_BINDING_HOST: http://192.168.0.8:11434
      LLM_MODEL: deepseek-r1:14b
      LLM_BINDING_API_KEY: 
      MAX_TOKENS: 8192
      # embedding
      EMBEDDING_BINDING: ollama
      EMBEDDING_BINDING_HOST: http://192.168.0.8:11434
      EMBEDDING_MODEL: bge-m3:latest
      EMBEDDING_BINDING_API_KEY:
      EMBEDDING_DIM: 1024
      MAX_EMBED_TOKENS: 8192
      # storage
      DOC_STATUS_STORAGE: JsonDocStatusStorage
      KV_STORAGE: JsonKVStorage
      GRAPH_STORAGE: NetworkXStorage
      VECTOR_STORAGE: NanoVectorDBStorage
      # addon params
      EXAMPLE_NUMBER: 2
      SUMMARY_LANGUAGE: "Simplfied Chinese"
      # other
      ENABLE_LLM_CACHE_FOR_ENTITY_EXTRACT: false
      ENABLE_LLM_CACHE: true
    volumes:
      # - ./volumes/lightrag/entrypoint.sh:/entrypoint.sh
      - ./volumes/lightrag/data/rag_storage:/app/rag_storage
      - ./volumes/lightrag/data/inputs:/app/inputs
    ports:
      - "19621:9621"
    healthcheck:
      test: [ "CMD", "curl", "-s", "http://localhost:9621/health" ]
      interval: 30s
      timeout: 20s
      retries: 5
    networks:
      - work_shared_network

  work_minio:
    image: minio/minio:RELEASE.2025-01-20T14-49-07Z
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "19001:9001"
      - "19000:9000"
    volumes:
      - ./volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - work_shared_network

  # The mysql database.
  work_mysql_db:
    image: mysql:8.0.40
    restart: always
    environment:
      TZ: "Asia/Shanghai"
      # The password for the default user.
      MYSQL_ROOT_PASSWORD: test
    command: 
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
      --max_allowed_packet=128M
    volumes:
      - ./init/docker-entrypoint-initdb.d/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql # 挂载初始化脚本
      - ./volumes/mysql:/var/lib/mysql
      # - ./mysql/my.cnf:/etc/my.cnf
    ports:
      - "23306:3306"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - work_shared_network

  # The redis cache.
  work_redis:
    image: redis:6-alpine
    restart: always
    volumes:
      # Mount the redis data directory to the container.
      - ./volumes/redis/data:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass work123456
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    # uncomment to expose redis port to host
    ports:
      - "26379:6379"
    user: root
    networks:
      - work_shared_network

  # The work api.
  work_api:
    image: work-api:1.0.5
    restart: always
    environment:
      - SERVER_TITLE=work-api
      - SERVER_PORT=5001
      - SERVER_LOGS_PATH=
      - DB_DIALECT=mysql
      - DB_HOST=work_mysql_db
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=test
      - DB_DATABASE=work_api
      - DB_TIMEZONE=+08:00
      - REDIS_HOST=work_redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=work123456
      - REDIS_DATABASE=work_api
      - COOKIE_KEYS=test-key
      - COOKIE_MAXAGE=259200
      - COOKIE_NAMESPACE=work_api
      - COOKIE_DOMAIN=
      - COOKIE_SECURE=true
      - COOKIE_HTTPONLY=true
      - CRYPTO_SECRETKEY=
      - CORS_ALLOW_ORIGIN=
      - ROUTE_BASE_URL=/api/v1
      - DB_SYNC=
      - OAUTH2_SECRET=test-secret
      - OAUTH2_BEARER=Bearer
      - OAUTH2_EXPIRES_IN=86400
      - LOGIN_MAX_ERROR_COUNT=3
      - LOGIN_LOCK_TIME=5
      # ollama server
      - OLLAMA_KEEPALIVE=10m
      # minio
      - MINIO_PUBLIC=
      - MINIO_ENDPOINT=192.168.0.24
      - MINIO_PORT=19000
      - MINIO_ACCESS_KEY=FIBShEmYsxHabW9hgypf
      - MINIO_SECRET_KEY=sngICCoTcJQa5ILOQ3hnCQC7taI6cMvhHC79AoKP
      - MINIO_BUCKET_NAME=work-prd
      - MINIO_REGION=ap-southeast-1
      - MINIO_USE_SSL=false
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/work-api/uploads:/app/api/uploads
    depends_on:
      - work_mysql_db
      - work_redis
    ports:
      - "25001:5001"
    user: root
    networks:
      - work_shared_network

  # The work web.
  work_web:
    image: work-web:1.0.5
    restart: always
    environment:
      # 环境变量
      - NODE_ENV=production
      #本地开发端口
      - PORT=8080
      #Hash路由模式开关
      - UMI_APP_HISTORY_HASH=true
      #路由根路径
      - UMI_APP_BASENAME=/
      #前端静态文件请求地址前缀
      - UMI_APP_PUBLIC_PATH=./
      #平台标题/名称
      - UMI_APP_TITLE=AI模型广场
      #平台副标题
      - UMI_APP_SUB_TITLE=大模型管理中心
      #平台logo
      - UMI_APP_LOGO_URL=
      #平台icon
      - UMI_APP_FAVICON_URL=
      #版权声明
      - UMI_APP_COPYRIGHT="WORK.ltd, All rights reserved."
      #用户协议地址
      - UMI_APP_AGREEMENT_URL="./agreement.html" 
      #token-存储标识
      - UMI_APP_TOKEN_KEY=work_token
      #http请求-鉴权标识
      - UMI_APP_HTTP_AUTH_KEY=Authorization
      #http请求-鉴权值-前缀
      - UMI_APP_HTTP_AUTH_VALUE_PREFIX=Bearer
      #图片上传-类型限制
      - UMI_APP_UPLOAD_IMAGE_ACCEPT="image/png,image/jpeg,image/x-icon,image/svg+xml"
      #图片上传-类型限制-后缀
      - UMI_APP_UPLOAD_IMAGE_ACCEPT_EXTENSION="*.png,*.jfif,*.pjpeg,*.jpeg,*.pjp,*.jpg,*.ico,*.svgz,*.svg"
      #图片上传-大小限制（kb）
      - UMI_APP_UPLOAD_IMAGE_LIMIT=500
      #mock接口开关，用于接口模拟，与代理接口共存时，优先使用代理接口
      - UMI_APP_MOCK=
      #API接口-代理地址
      - UMI_APP_PROXY_API=
      #uploads-代理地址
      - UMI_APP_PROXY_UPLOADS=
    volumes:
      - ./volumes/app/work-api/uploads:/usr/share/nginx/html/uploads
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
      #- ./nginx/ssl:/etc/ssl
    depends_on:
      - work_api
    ports:
      - "20080:80"
      #- "443:443"
    entrypoint: [ "/bin/bash", "/entrypoint.sh" ]
    networks:
      - work_shared_network

# 定义共享网络
networks:
  work_shared_network:
    driver: bridge
